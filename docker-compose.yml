networks:
  traefik:
    external: true
    
services:

  postgres:
    image: postgres:15
    container_name: pm_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    networks:
      - traefik
  
  fastapi:
    build: .
    image: pm-fastapi:latest
    container_name: pm_fastapi
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_NAME}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGO=${JWT_ALGO}
      - TRAEFIK_PATH_PREFIX=/pm/api # !!! doit etre le mm !!!
      - API_PORT=8000 # !!! doit etre le mm !!!
    depends_on:
      - postgres
    # ports:          # temp
    #   - "8000:8000" # temp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pm_api.rule=PathPrefix(`/pm/api`)" # !!! doit etre le mm !!!
      # - "traefik.http.routers.pm_api.rule=Host(`raspi5.lan`) && PathPrefix(`/pm/api`)" # !!! doit etre le mm !!!
      # - "traefik.http.routers.pm_api.entrypoints=web"
      - "traefik.http.routers.pm_api.entrypoints=websecure"
      - "traefik.http.routers.pm_api.tls.certresolver=selfsigned"
      - "traefik.http.services.pm_api.loadbalancer.server.port=8000" # !!! doit etre le mm !!!
    networks:
      - traefik

  adminer:
    image: adminer
    container_name: pm_adminer
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pm_adminer.rule=PathPrefix(`/pm/adminer`)"
      # - "traefik.http.routers.pm_api.entrypoints=web"
      - "traefik.http.routers.pm_adminer.entrypoints=websecure"
      - "traefik.http.routers.pm_adminer.tls.certresolver=selfsigned"
      - "traefik.http.services.pm_adminer.loadbalancer.server.port=8080"
    networks:
      - traefik